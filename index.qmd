---
title: "Welcome to my Portfolio"
author: "Nathan Princilus"
date: today
format: html
---

## Introduction

Hello! My nickname is NatePrince.  This is my quarto visualization portfolio showcasing my python and matplotlib skills. I am an entry level data analyst learning the ropes of data analysis and visualization.

## About this Portfolio

I will create and visualize datasets that I find interesting and share them here.

## What is Matplotlib?

**Matplotlib** is a comprehensive library for creating static, animated, and interactive visualizations in Python. It's one of the most popular plotting libraries in the Python ecosystem and serves as the foundation for many other visualization libraries.

### Why Matplotlib is Useful

**Versatility**: Matplotlib can create a wide variety of plots including:
- Line plots, bar charts, scatter plots, histograms
- 3D plots, contour plots, and heatmaps
- Statistical plots and mathematical visualizations

**Customization**: Every aspect of a plot can be customized:
- Colors, fonts, line styles, and markers
- Axes, labels, titles, and legends
- Layout and figure size

**Publication Quality**: Matplotlib produces high-quality figures suitable for:
- Scientific publications and reports
- Presentations and dashboards
- Web applications and printed materials

**Integration**: Works seamlessly with:
- NumPy and pandas for data manipulation
- Jupyter notebooks for interactive analysis
- Web frameworks like Flask and Django
- Scientific computing libraries

**Learning Foundation**: Understanding matplotlib helps with:
- Other Python visualization libraries (seaborn, plotly)
- Data analysis workflows
- Scientific computing and research

The examples below demonstrate some of matplotlib's capabilities for creating clear, informative visualizations.

```{python}
import matplotlib.pyplot as plt
import numpy as np

# Simple line chart
x = np.linspace(0, 10, 100)
y = np.sin(x)

# Create plot

plt.figure(figsize=(7, 4.75))
plt.plot(x, y, 'b-', linewidth=2, label='sin(x)')
plt.xlabel('X values')
plt.ylabel('Y values')
plt.title('Simple Line Chart')
plt.grid(True, alpha=0.3)
plt.legend()
plt.show()
```

## Sample Bar Chart

Here's a colorful bar chart showing different categories and their values:

```{python}
# Bar chart data
categories = ['A', 'B', 'C', 'D', 'E']
values = [23, 45, 56, 78, 32]

# Create bar chart
plt.figure(figsize=(7, 4.75))
bars = plt.bar(categories, values, color=['red', 'green', 'blue', 'orange', 'purple'])

# Add labels and title
plt.ylabel('values')
plt.xlabel('categories')
plt.title('Sample Bar Chart')

# Add value labels on bars
for bar, value in zip(bars, values):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1, str(value), ha='center', va='bottom')

plt.show()
```

## NatePrince Scatter Plot

Here's a scatter plot with random data points showcasing data distribution:

```{python}
# Generate random data points
np.random.seed(42)  # For reproducible results
n_points = 50

x_scatter = np.random.normal(50, 15, n_points)  # Random x values with mean=50, std=15
y_scatter = np.random.normal(30, 10, n_points)  # Random y values with mean=30, std=10
colors = np.random.rand(n_points)  # Random colors for each point
sizes = np.random.randint(20, 200, n_points)  # Random sizes for each point

# Create scatter plot
plt.figure(figsize=(7, 4.75))
scatter = plt.scatter(x_scatter, y_scatter, c=colors, s=sizes, alpha=0.7, cmap='viridis')

# Add labels and title
plt.xlabel('X Values')
plt.ylabel('Y Values')
plt.title('NatePrince Scatter Plot')
plt.grid(True, alpha=0.3)

# Add a colorbar to show color scale
plt.colorbar(scatter, label='Color Scale')

plt.show()
```


